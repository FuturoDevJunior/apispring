name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

defaults:
  run:
    shell: bash

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  backend-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [21]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Executar testes backend + JaCoCo
      working-directory: creditos-api/backend/creditos-api
      run: ./mvnw -B clean verify
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./creditos-api/backend/creditos-api/target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Generate JaCoCo Badge
      id: jacoco
      uses: cicirello/jacoco-badge-generator@v2
      with:
        jacoco-csv-file: ./creditos-api/backend/creditos-api/target/site/jacoco/jacoco.csv
        
    - name: Log coverage percentage
      run: |
        echo "coverage = ${{ steps.jacoco.outputs.coverage }}%"
        echo "branches = ${{ steps.jacoco.outputs.branches }}%"

  frontend-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20.19.3]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node }}
        cache: 'npm'
        cache-dependency-path: creditos-api/frontend/creditos-ui/package-lock.json
        
    - name: Cache NPM e node_modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          creditos-api/frontend/creditos-ui/node_modules
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        
    - name: Instalar dependências
      run: |
        cd creditos-api/frontend/creditos-ui
        HUSKY_SKIP_INSTALL=1 npm ci
        
    - name: Verificar versão Angular CLI disponível
      run: |
        cd creditos-api/frontend/creditos-ui
        npx @angular/cli version
        
    - name: Executar lint
      run: |
        cd creditos-api/frontend/creditos-ui
        npm run lint
        
    - name: Build produção
      run: |
        cd creditos-api/frontend/creditos-ui
        ng build --configuration production --no-progress || npx @angular/cli@20 build --configuration production --no-progress
        
    - name: Upload dist artefact
      uses: actions/upload-artifact@v4
      with:
        name: ui-dist
        path: creditos-api/frontend/creditos-ui/dist
        
    - name: Verificar tamanho do bundle
      run: |
        cd creditos-api/frontend/creditos-ui
        ls -lah dist/creditos-ui/
        find dist/ -name "*.js" -exec gzip -c {} \; | wc -c | awk '{if($1 > 262144) {print "Bundle muito grande: " $1 " bytes"; exit 1} else {print "Bundle OK: " $1 " bytes"}}'

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build e push da API
      uses: docker/build-push-action@v5
      with:
        context: ./creditos-api/backend
        file: ./creditos-api/backend/Dockerfile
        push: true
        tags: ghcr.io/futurodevjunior/apispring:${{ github.sha }}
        provenance: false
        outputs: type=registry
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Normalizar nome da imagem
      id: vars
      run: |
        echo "repo_lc=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
        
    - name: Build e push do Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./creditos-api/frontend/creditos-ui
        file: ./creditos-api/frontend/creditos-ui/Dockerfile
        push: true
        tags: ghcr.io/futurodevjunior/apispring-ui:${{ github.sha }}
        provenance: false
        outputs: type=registry
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Download Trivy cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/trivy
        key: ${{ runner.os }}-trivy-db
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: ghcr.io/futurodevjunior/apispring:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  preflight:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
      
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.19.3
        cache: 'npm'
        cache-dependency-path: creditos-api/frontend/creditos-ui/package-lock.json
        
    - name: Executar preflight check
      run: |
        echo "=== PREFLIGHT CHECK ENTERPRISE ==="
        
        # Verificar versões
        echo "✅ Java: $(java -version 2>&1 | head -1)"
        echo "✅ Node: $(node --version)"
        echo "✅ NPM: $(npm --version)"
        
        # Validar estrutura do projeto
        echo "\n📁 Validando estrutura do projeto..."
        test -f "creditos-api/backend/creditos-api/pom.xml" && echo "✅ Backend POM encontrado"
        test -f "creditos-api/frontend/creditos-ui/package.json" && echo "✅ Frontend package.json encontrado"
        test -f "creditos-api/infra/docker-compose.yml" && echo "✅ Docker Compose encontrado"
        
        # Validar arquivos críticos
        echo "\n🔍 Validando arquivos críticos..."
        test -f "README.md" && echo "✅ README.md presente"
        test -f "CHANGELOG.md" && echo "✅ CHANGELOG.md presente"
        test -f "docs/ARQUITETURA.md" && echo "✅ Documentação de arquitetura presente"
        
        # Verificar scripts
        echo "\n⚙️ Validando scripts..."
        test -f "preflight.sh" && chmod +x preflight.sh && echo "✅ preflight.sh executável"
        test -f "wait-for-it.sh" && chmod +x wait-for-it.sh && echo "✅ wait-for-it.sh executável"
        
        # Compilação básica backend
        echo "\n🏗️ Validando compilação backend..."
        cd creditos-api/backend/creditos-api
        ./mvnw compile -q && echo "✅ Backend compila sem erros"
        cd ../../../
        
        # Validação frontend
        echo "\n🎨 Validando frontend..."
        cd creditos-api/frontend/creditos-ui
        npm ci --silent
        npm run lint && echo "✅ Frontend lint passou"
        cd ../../../
        
        echo "\n🎯 PREFLIGHT CHECK COMPLETED SUCCESSFULLY"
