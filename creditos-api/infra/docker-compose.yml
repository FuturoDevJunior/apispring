services:
  # PostgreSQL 17.5
  db:
    image: postgres:17.5
    container_name: creditos-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: creditos
    ports:
      - "5432:5432"
    volumes:
      - pgdata17:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
    networks:
      - creditos-network

  # Zookeeper para Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: creditos-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - creditos-network

  # Kafka 3.7.0 (baseado na imagem Confluent)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: creditos-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - creditos-network

  # API Spring Boot (será criada posteriormente)
  api:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: creditos-api
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/creditos
      SPRING_DATASOURCE_USERNAME: dev
      SPRING_DATASOURCE_PASSWORD: dev
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - creditos-network
    profiles:
      - full

  # Frontend Angular (será criado posteriormente)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: creditos-frontend
    depends_on:
      - api
    ports:
      - "80:80"
    networks:
      - creditos-network
    profiles:
      - full

volumes:
  pgdata17:

networks:
  creditos-network:
    driver: bridge
